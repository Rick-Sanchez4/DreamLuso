#!/bin/bash

# üöÄ DreamLuso - Iniciar Backend com SQL Server
# Este script inicia o banco SQL Server e a API

set -e

echo "üè† DreamLuso - Iniciando Backend"
echo "==============================="

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para log
log() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Verificar se Docker est√° rodando
if ! docker info &> /dev/null; then
    error "Docker n√£o est√° rodando. Por favor, inicie o Docker primeiro."
    echo "sudo systemctl start docker"
    exit 1
fi

# Parar containers existentes
log "Parando containers existentes..."
docker compose -f docker-compose.sqlserver.yml down 2>/dev/null || true

# Iniciar SQL Server
log "Iniciando SQL Server..."
docker compose -f docker-compose.sqlserver.yml up -d dreamluso-sqlserver

# Aguardar SQL Server ficar pronto
log "Aguardando SQL Server ficar pronto..."
sleep 30

# Verificar se SQL Server est√° rodando
if docker ps | grep -q "dreamluso-sqlserver-local"; then
    success "SQL Server iniciado com sucesso!"
else
    error "Falha ao iniciar SQL Server"
    exit 1
fi

# Aguardar mais um pouco para garantir que est√° totalmente pronto
log "Aguardando SQL Server ficar totalmente pronto..."
sleep 20

# Testar conex√£o
log "Testando conex√£o com SQL Server..."
if docker exec dreamluso-sqlserver-local /opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P 'DreamLuso2025!' -C -Q "SELECT 1" &>/dev/null; then
    success "Conex√£o com SQL Server estabelecida!"
else
    warning "Conex√£o ainda n√£o est√° pronta. Aguardando mais um pouco..."
    sleep 30
fi

# Navegar para o diret√≥rio da API
cd DreamLuso.WebAPI

# Configurar ambiente
export ASPNETCORE_ENVIRONMENT=SqlServer
export ConnectionStrings__DreamLusoDB="Server=localhost,1433;Database=DreamLusoDB;User Id=sa;Password=DreamLuso2025!;TrustServerCertificate=True;MultipleActiveResultSets=True;Encrypt=false;"
export DatabaseProvider=SqlServer

log "Configura√ß√£o:"
echo "  ASPNETCORE_ENVIRONMENT: $ASPNETCORE_ENVIRONMENT"
echo "  DatabaseProvider: $DatabaseProvider"

# Aplicar migra√ß√µes
log "Aplicando migra√ß√µes do banco de dados..."
dotnet ef database update --context ApplicationDbContext || {
    warning "Falha ao aplicar migra√ß√µes via EF. Tentando via API..."
    # Se falhar, vamos tentar via API
}

# Verificar se o banco tem dados e executar seed se necess√°rio
log "Verificando se o banco precisa ser populado..."
USER_COUNT=$(docker exec dreamluso-sqlserver-local /opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P 'DreamLuso2025!' -C -Q "USE DreamLusoDB; SELECT COUNT(*) FROM [DreamLuso].[User];" -h -1 | tail -n 1 | tr -d ' ')

if [ "$USER_COUNT" = "0" ]; then
    log "Banco vazio detectado. Executando seed autom√°tico..."
    bash scripts/seed-database.sh
    success "Banco populado com dados de teste!"
else
    log "Banco j√° possui $USER_COUNT usu√°rios. Seed n√£o necess√°rio."
fi

# Iniciar API
log "Iniciando API DreamLuso..."
echo ""
echo "üåê URLs da Aplica√ß√£o:"
echo "   API: http://localhost:5149"
echo "   Swagger: http://localhost:5149/swagger"
echo "   Health: http://localhost:5149/health"
echo ""
echo "üìä Banco de Dados:"
echo "   Host: localhost:1433"
echo "   Database: DreamLusoDB"
echo "   User: sa"
echo "   Password: DreamLuso2025!"
echo ""

# Executar a aplica√ß√£o
dotnet run
